from typing import Union


class Object:
    def get_identifier(self) -> int: ...

class Variable:
    def get_identifier(self) -> int: ...

class Type:
    def get_identifier(self) -> int: ...

class Parameter:
    def get_identifier(self) -> int: ...

class Predicate:
    def get_identifier(self) -> int: ...

class TermObject:
    def get_identifier(self) -> int: ...
    def get_object(self) -> Object: ...

class TermVariable:
    def get_identifier(self) -> int: ...
    def get_variable(self) -> Variable: ...

class Term:
    def get(self) -> Union[TermObject, TermVariable]: ...

class Requirements:
    def get_identifier(self) -> int: ...

class Atom:
    def get_identifier(self) -> int: ...

class Literal:
    def get_identifier(self) -> int: ...

class GroundAtom:
    def get_identifier(self) -> int: ...

class GroundLiteral:
    def get_identifier(self) -> int: ...

class NumericFluent:
    def get_identifier(self) -> int: ...

class ConditionLiteral:
    def get_identifier(self) -> int: ...

class ConditionAndImpl:
    def get_identifier(self) -> int: ...

class ConditionOrImpl:
    def get_identifier(self) -> int: ...

class ConditionNotImpl:
    def get_identifier(self) -> int: ...

class ConditionImplyImpl:
    def get_identifier(self) -> int: ...

class ConditionExistsImpl:
    def get_identifier(self) -> int: ...

class ConditionForallImpl:
    def get_identifier(self) -> int: ...

class Condition:
    pass

class EffectLiteral:
    def get_identifier(self) -> int: ...

class EffectAndImpl:
    def get_identifier(self) -> int: ...

class EffectNumericImpl:
    def get_identifier(self) -> int: ...

class EffectConditionalForallImpl:
    def get_identifier(self) -> int: ...

class EffectConditionalWhenImpl:
    def get_identifier(self) -> int: ...

class Effect:
    pass

class FunctionExpressionNumber:
    def get_identifier(self) -> int: ...

class FunctionExpressionBinaryOperator:
    def get_identifier(self) -> int: ...

class FunctionExpressionMultiOperator:
    def get_identifier(self) -> int: ...

class FunctionExpressionMinus:
    def get_identifier(self) -> int: ...

class FunctionExpressionFunction:
    def get_identifier(self) -> int: ...

class FunctionExpression:
    pass

class FunctionSkeleton:
    def get_identifier(self) -> int: ...

class Function:
    def get_identifier(self) -> int: ...

class OptimizationMetric:
    def get_identifier(self) -> int: ...

class PDDLFactories:
    pass

class Action:
    def get_identifier(self) -> int: ...

class Domain:
    def get_identifier(self) -> int: ...

class Problem:
    def get_identifier(self) -> int: ...

class PDDLParser:
    def __init__(self, domain_filepath: str, problem_filepath: str) -> None: ...
    def get_domain(self) -> Domain: ...
    def get_problem(self) -> Problem: ...
    def get_factories(self) -> PDDLFactories: ...

