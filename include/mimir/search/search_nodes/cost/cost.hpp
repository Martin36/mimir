#ifndef MIMIR_SEARCH_SEARCH_NODES_COST_HPP_
#define MIMIR_SEARCH_SEARCH_NODES_COST_HPP_


#include "../../../buffer/flatbuffers/search_node-cost_generated.h"

#include "../../../buffer/byte_stream.hpp"

#include "../../states.hpp"
#include "../../actions.hpp"

#include <cassert>


namespace mimir
{


/**
 * Data types
*/
enum SearchNodeStatus {NEW = 0, OPEN = 1, CLOSED = 2, DEAD_END = 3};


/**
 * ID class.
 *
 * Define name and template parameters of your own implementation.
*/
template<IsPlanningModeTag P, IsStateTag S>
class CostSearchNodeTag {};


/**
 * Type traits.
*/
template<IsPlanningModeTag P, IsStateTag S>
struct TypeTraits<Builder<CostSearchNodeTag<P, S>>>
{
    using PlanningModeTag = P;
    using StateTag = S;
};

template<IsPlanningModeTag P, IsStateTag S>
struct TypeTraits<View<CostSearchNodeTag<P, S>>>
{
    using PlanningModeTag = P;
    using StateTag = S;
};


/**
 * Implementation class
*/
template<IsPlanningModeTag P, IsStateTag S>
class Builder<CostSearchNodeTag<P, S>>
    : public IBuilderBase<Builder<CostSearchNodeTag<P, S>>>
{
private:
    using StateView = View<StateDispatcher<S, P>>;
    using ActionView = View<ActionDispatcher<P, S>>;

    /* Define buffer */
    ByteStream m_buffer;

    /* Define data members */
    SearchNodeStatus m_status;  // 1 byte
    int32_t m_g_value;          // 4 byte
    StateView m_parent_state;   // 16 byte should we just store state id here?

    /* Define memory layout */
    constexpr static size_t s_status_offset = 0;
    constexpr static size_t s_g_value_offset = 4;
    constexpr static size_t s_parent_state_offset = 8;
    constexpr static size_t s_size = 24;

    /* Implement IBuilderBase interface */
    template<typename>
    friend class IBuilderBase;

    void finish_impl() {
        int pos = 0;
        pos += m_buffer.write<SearchNodeStatus>(m_status);
        assert(pos <= 4);
        pos += m_buffer.write_padding(s_g_value_offset - pos);
        assert(pos == 4);
        pos += m_buffer.write<int32_t>(m_g_value);
        assert(pos == 8);
        pos += m_buffer.write<StateView>(m_parent_state);
        assert(pos == 24);
        assert(is_correctly_aligned(pos));
    }

    void clear_impl() { m_buffer.clear(); }

    [[nodiscard]] uint8_t* get_buffer_pointer_impl() { return m_buffer.get_data(); }
    [[nodiscard]] const uint8_t* get_buffer_pointer_impl() const { return m_buffer.get_data(); }
    [[nodiscard]] uint32_t get_size_impl() const { return m_buffer.get_size(); }

public:
    Builder() : m_parent_state(nullptr) { }

    /// @brief Construct a builder with custom default values.
    Builder(SearchNodeStatus status, int g_value, StateView parent_state)
        : m_status(status), m_g_value(g_value), m_parent_state(parent_state) {
        this->finish();
    }

    void set_status(SearchNodeStatus status) { m_status = status; }
    void set_g_value(int g_value) { m_g_value = g_value; }
    void set_parent_state(StateView parent_state) { m_parent_state = parent_state; }
};


/**
 * Implementation class
 *
 * Reads the memory layout generated by the search node builder.
*/
template<IsPlanningModeTag P, IsStateTag S>
class View<CostSearchNodeTag<P, S>>
    : public IView<View<CostSearchNodeTag<P, S>>>
{
private:
    using StateView = View<StateDispatcher<S, P>>;
    using ActionView = View<ActionDispatcher<P, S>>;

    uint8_t* m_data;

    constexpr static size_t s_status_offset = 0;
    constexpr static size_t s_g_value_offset = 4;
    constexpr static size_t s_parent_state_offset = 8;
    constexpr static size_t s_size = 24;

    /* Implement IView interface: */
    template<typename>
    friend class IView;

    [[nodiscard]] const uint8_t* get_buffer_pointer_impl() const { return m_data; }

    [[nodiscard]] uint32_t get_size_impl() const { return s_size; }

public:
    /// @brief Create a view on a SearchNode.
    explicit View(uint8_t* data) : m_data(data) { }

    void set_status(SearchNodeStatus status) {
        assert(m_data);
        read_value<SearchNodeStatus>(m_data + s_status_offset) = status;
    }

    void set_g_value(int32_t g_value) {
        assert(m_data);
        read_value<int32_t>(m_data + s_g_value_offset) = g_value;
    }

    [[nodiscard]] SearchNodeStatus get_status() {
        assert(m_data);
        return read_value<SearchNodeStatus>(m_data + s_status_offset);
    }

    [[nodiscard]] int32_t get_g_value() {
        assert(m_data);
        return read_value<int32_t>(m_data + s_g_value_offset);
    }

    [[nodiscard]] StateView get_parent_state() {
        assert(m_data);
        return read_value<StateView>(m_data + s_parent_state_offset);
    }
};


}

#endif