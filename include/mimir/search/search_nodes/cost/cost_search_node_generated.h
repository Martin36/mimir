// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COSTSEARCHNODE_MIMIR_H_
#define FLATBUFFERS_GENERATED_COSTSEARCHNODE_MIMIR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace mimir {

struct CostSearchNode;
struct CostSearchNodeBuilder;

enum SearchStatus : int8_t {
  SearchStatus_NEW = 0,
  SearchStatus_OPEN = 1,
  SearchStatus_CLOSED = 2,
  SearchStatus_DEAD_END = 3,
  SearchStatus_MIN = SearchStatus_NEW,
  SearchStatus_MAX = SearchStatus_DEAD_END
};

inline const SearchStatus (&EnumValuesSearchStatus())[4] {
  static const SearchStatus values[] = {
    SearchStatus_NEW,
    SearchStatus_OPEN,
    SearchStatus_CLOSED,
    SearchStatus_DEAD_END
  };
  return values;
}

inline const char * const *EnumNamesSearchStatus() {
  static const char * const names[5] = {
    "NEW",
    "OPEN",
    "CLOSED",
    "DEAD_END",
    nullptr
  };
  return names;
}

inline const char *EnumNameSearchStatus(SearchStatus e) {
  if (::flatbuffers::IsOutRange(e, SearchStatus_NEW, SearchStatus_DEAD_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSearchStatus()[index];
}

struct CostSearchNode FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CostSearchNodeBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_G_VALUE = 6,
    VT_STATE = 8,
    VT_ACTION = 10
  };
  mimir::SearchStatus status() const {
    return static_cast<mimir::SearchStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  int32_t g_value() const {
    return GetField<int32_t>(VT_G_VALUE, 0);
  }
  uint64_t state() const {
    return GetField<uint64_t>(VT_STATE, 0);
  }
  uint64_t action() const {
    return GetField<uint64_t>(VT_ACTION, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyField<int32_t>(verifier, VT_G_VALUE, 4) &&
           VerifyField<uint64_t>(verifier, VT_STATE, 8) &&
           VerifyField<uint64_t>(verifier, VT_ACTION, 8) &&
           verifier.EndTable();
  }
};

struct CostSearchNodeBuilder {
  typedef CostSearchNode Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_status(mimir::SearchStatus status) {
    fbb_.AddElement<int8_t>(CostSearchNode::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_g_value(int32_t g_value) {
    fbb_.AddElement<int32_t>(CostSearchNode::VT_G_VALUE, g_value, 0);
  }
  void add_state(uint64_t state) {
    fbb_.AddElement<uint64_t>(CostSearchNode::VT_STATE, state, 0);
  }
  void add_action(uint64_t action) {
    fbb_.AddElement<uint64_t>(CostSearchNode::VT_ACTION, action, 0);
  }
  explicit CostSearchNodeBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CostSearchNode> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CostSearchNode>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CostSearchNode> CreateCostSearchNode(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    mimir::SearchStatus status = mimir::SearchStatus_NEW,
    int32_t g_value = 0,
    uint64_t state = 0,
    uint64_t action = 0) {
  CostSearchNodeBuilder builder_(_fbb);
  builder_.add_action(action);
  builder_.add_state(state);
  builder_.add_g_value(g_value);
  builder_.add_status(status);
  return builder_.Finish();
}

inline const mimir::CostSearchNode *GetCostSearchNode(const void *buf) {
  return ::flatbuffers::GetRoot<mimir::CostSearchNode>(buf);
}

inline const mimir::CostSearchNode *GetSizePrefixedCostSearchNode(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<mimir::CostSearchNode>(buf);
}

inline bool VerifyCostSearchNodeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mimir::CostSearchNode>(nullptr);
}

inline bool VerifySizePrefixedCostSearchNodeBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mimir::CostSearchNode>(nullptr);
}

inline void FinishCostSearchNodeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::CostSearchNode> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCostSearchNodeBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::CostSearchNode> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace mimir

#endif  // FLATBUFFERS_GENERATED_COSTSEARCHNODE_MIMIR_H_
