#ifndef MIMIR_SEARCH_ACTIONS_BITSET_HPP_
#define MIMIR_SEARCH_ACTIONS_BITSET_HPP_

#include "../../common/hash.hpp"
#include "../types.hpp"
#include "interface.hpp"

namespace mimir
{
/**
 * Types
 */
using BitsetActionLayout = flatmemory::Tuple<BitsetLayout, BitsetLayout, BitsetLayout, BitsetLayout>;

using BitsetActionBuilder = flatmemory::Builder<BitsetActionLayout>;
using BitsetActionConstView = flatmemory::ConstView<BitsetActionLayout>;
using BitsetActionVector = flatmemory::VariableSizedTypeVector<BitsetActionLayout>;

/**
 * Implementation class
 */
template<IsPlanningModeTag P>
class Builder<ActionDispatcher<P, BitsetStateTag>> :
    public IBuilder<Builder<ActionDispatcher<P, BitsetStateTag>>>,
    public IActionBuilder<Builder<ActionDispatcher<P, BitsetStateTag>>>
{
private:
    BitsetActionBuilder m_builder;

    /* Implement IBuilder interface */
    template<typename>
    friend class IBuilder;

    [[nodiscard]] BitsetActionBuilder& get_flatmemory_builder_impl() { return m_builder; }
    [[nodiscard]] const BitsetActionBuilder& get_flatmemory_builder_impl() const { return m_builder; }

    /* Implement IActionBuilder interface */
    template<typename>
    friend class IActionBuilder;

public:
    /// @brief Modify the bitsets, call finish, then copy the buffer to a container and use its returned view.
    [[nodiscard]] Bitset& get_applicability_positive_precondition_bitset() { return m_builder.get<0>(); }
    [[nodiscard]] Bitset& get_applicability_negative_precondition_bitset() { return m_builder.get<1>(); }
    [[nodiscard]] Bitset& get_unconditional_positive_effect_bitset() { return m_builder.get<2>(); }
    [[nodiscard]] Bitset& get_unconditional_negative_effect_bitset() { return m_builder.get<3>(); }
};

/**
 * Implementation class
 *
 * Reads the memory layout generated by the search node builder.
 */
template<IsPlanningModeTag P>
class ConstView<ActionDispatcher<P, BitsetStateTag>> :
    public IConstView<ConstView<ActionDispatcher<P, BitsetStateTag>>>,
    public IActionView<ConstView<ActionDispatcher<P, BitsetStateTag>>>
{
private:
    using ConstStateView = ConstView<StateDispatcher<BitsetStateTag, P>>;

    BitsetActionConstView m_view;

    /* Implement IView interface: */
    template<typename>
    friend class IConstView;

    [[nodiscard]] bool are_equal_impl(const ConstView& other) const
    {
        return get_applicability_positive_precondition_bitset() == other.get_applicability_positive_precondition_bitset()
               && get_applicability_negative_precondition_bitset() == other.get_applicability_negative_precondition_bitset()
               && get_unconditional_positive_effect_bitset() == other.get_unconditional_positive_effect_bitset()
               && get_unconditional_negative_effect_bitset() == other.get_unconditional_negative_effect_bitset();
    }

    [[nodiscard]] size_t hash_impl() const
    {
        return hash_combine(get_applicability_positive_precondition_bitset().hash(),
                            get_applicability_negative_precondition_bitset().hash(),
                            get_unconditional_positive_effect_bitset().hash(),
                            get_unconditional_negative_effect_bitset().hash());
    }

    /* Implement IActionView interface */
    template<typename>
    friend class IActionView;

    // We probably want to do that differently...
    std::string str_impl() const { return "Action(...)"; }

public:
    /// @brief Create a view on a DefaultAction.
    explicit ConstView(BitsetActionConstView view) : m_view(view) {}

    [[nodiscard]] ConstBitsetView get_applicability_positive_precondition_bitset() const { return m_view.get<0>(); }
    [[nodiscard]] ConstBitsetView get_applicability_negative_precondition_bitset() const { return m_view.get<1>(); }
    [[nodiscard]] ConstBitsetView get_unconditional_positive_effect_bitset() const { return m_view.get<2>(); };
    [[nodiscard]] ConstBitsetView get_unconditional_negative_effect_bitset() const { return m_view.get<3>(); };

    [[nodiscard]] bool is_applicable(ConstStateView state) const
    {
        const auto state_bitset = state.get_atoms_bitset();
        return state_bitset.is_superseteq(get_applicability_positive_precondition_bitset())
               && state_bitset.are_disjoint(get_applicability_negative_precondition_bitset());
    }
};

}

#endif
