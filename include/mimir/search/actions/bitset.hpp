#ifndef MIMIR_SEARCH_ACTIONS_BITSET_HPP_
#define MIMIR_SEARCH_ACTIONS_BITSET_HPP_

#include "interface.hpp"

#include "../../buffer/flatbuffers/action-default_generated.h"


namespace mimir
{

/**
 * Implementation class
*/
template<IsPlanningModeTag P>
class Builder<ActionDispatcher<P, BitsetStateTag>>
    : public IBuilderBase<Builder<ActionDispatcher<P, BitsetStateTag>>>
    , public IActionBuilder<Builder<ActionDispatcher<P, BitsetStateTag>>>
{
private:
    flatbuffers::FlatBufferBuilder m_flatbuffers_builder;

    // The bitset data
    Bitset<uint64_t> m_applicability_positive_precondition_bitset;
    Bitset<uint64_t> m_applicability_negative_precondition_bitset;
    Bitset<uint64_t> m_unconditional_positive_effect_bitset;
    Bitset<uint64_t> m_unconditional_negative_effect_bitset;

    /* Implement IBuilderBase interface */
    template<typename>
    friend class IBuilderBase;

    void finish_impl() {
        auto builder = DefaultActionFlatBuilder(this->m_flatbuffers_builder);
        this->m_flatbuffers_builder.FinishSizePrefixed(builder.Finish());
    }

    void clear_impl() {
        m_flatbuffers_builder.Clear();
    }

    [[nodiscard]] uint8_t* get_buffer_pointer_impl() { return m_flatbuffers_builder.GetBufferPointer(); }
    [[nodiscard]] const uint8_t* get_buffer_pointer_impl() const { return m_flatbuffers_builder.GetBufferPointer(); }
    [[nodiscard]] uint32_t get_size_impl() const { return *reinterpret_cast<const flatbuffers::uoffset_t*>(this->get_buffer_pointer()) + sizeof(flatbuffers::uoffset_t); }

    /* Implement IActionBuilder interface */
    template<typename>
    friend class IActionBuilder;

public:
    [[nodiscard]] Bitset<uint64_t>& get_applicability_positive_precondition_bitset() { return m_applicability_positive_precondition_bitset; }
    [[nodiscard]] Bitset<uint64_t>& get_applicability_negative_precondition_bitset() { return m_applicability_negative_precondition_bitset; }
    [[nodiscard]] Bitset<uint64_t>& get_unconditional_positive_effect_bitset() { return m_unconditional_positive_effect_bitset; }
    [[nodiscard]] Bitset<uint64_t>& get_unconditional_negative_effect_bitset() { return m_unconditional_negative_effect_bitset; }
};



/**
 * Implementation class
 *
 * Reads the memory layout generated by the search node builder.
*/
template<IsPlanningModeTag P>
class View<ActionDispatcher<P, BitsetStateTag>>
    : public ViewBase<View<ActionDispatcher<P, BitsetStateTag>>>
    , public IActionView<View<ActionDispatcher<P, BitsetStateTag>>>
{
private:
    const DefaultActionFlat* m_flatbuffers_view;


    /* Implement ViewBase interface: */
    template<typename>
    friend class ViewBase;

    /* Implement IActionView interface */
    template<typename>
    friend class IActionView;

    // We probably want to do that differently...
    std::string str_impl() const { return "some_action"; }

public:
    /// @brief Create a view on a DefaultAction.
    explicit View(uint8_t* data)
        : ViewBase<View<ActionDispatcher<P, BitsetStateTag>>>(data)
        , m_flatbuffers_view(data ? GetSizePrefixedDefaultActionFlat(reinterpret_cast<void*>(data)) : nullptr) { }

    [[nodiscard]] BitsetView get_applicability_positive_precondition_bitset() { return BitsetView(m_flatbuffers_view->applicability_positive_precondition_bitset()); }
    [[nodiscard]] BitsetView get_applicability_negative_precondition_bitset() { return BitsetView(m_flatbuffers_view->applicability_negative_precondition_bitset()); }
    [[nodiscard]] BitsetView get_unconditional_positive_effect_bitset() { return BitsetView(m_flatbuffers_view->unconditional_positive_effect_bitset()); };
    [[nodiscard]] BitsetView get_unconditional_negative_effect_bitset() { return BitsetView(m_flatbuffers_view->unconditional_negative_effect_bitset()); };
};



}

#endif
