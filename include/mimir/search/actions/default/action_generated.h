// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ACTION_MIMIR_H_
#define FLATBUFFERS_GENERATED_ACTION_MIMIR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace mimir {

struct Action;
struct ActionBuilder;

struct Action FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ActionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_APPLICABILITY_POSITIVE_PRECONDITION_BITSET = 4,
    VT_APPLICABILITY_NEGATIVE_PRECONDITION_BITSET = 6,
    VT_UNCONDITIONAL_POSITIVE_EFFECT_BITSET = 8,
    VT_UNCONDITIONAL_NEGATIVE_EFFECT_BITSET = 10
  };
  const ::flatbuffers::Vector<uint64_t> *applicability_positive_precondition_bitset() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_APPLICABILITY_POSITIVE_PRECONDITION_BITSET);
  }
  const ::flatbuffers::Vector<uint64_t> *applicability_negative_precondition_bitset() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_APPLICABILITY_NEGATIVE_PRECONDITION_BITSET);
  }
  const ::flatbuffers::Vector<uint64_t> *unconditional_positive_effect_bitset() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_UNCONDITIONAL_POSITIVE_EFFECT_BITSET);
  }
  const ::flatbuffers::Vector<uint64_t> *unconditional_negative_effect_bitset() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_UNCONDITIONAL_NEGATIVE_EFFECT_BITSET);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_APPLICABILITY_POSITIVE_PRECONDITION_BITSET) &&
           verifier.VerifyVector(applicability_positive_precondition_bitset()) &&
           VerifyOffset(verifier, VT_APPLICABILITY_NEGATIVE_PRECONDITION_BITSET) &&
           verifier.VerifyVector(applicability_negative_precondition_bitset()) &&
           VerifyOffset(verifier, VT_UNCONDITIONAL_POSITIVE_EFFECT_BITSET) &&
           verifier.VerifyVector(unconditional_positive_effect_bitset()) &&
           VerifyOffset(verifier, VT_UNCONDITIONAL_NEGATIVE_EFFECT_BITSET) &&
           verifier.VerifyVector(unconditional_negative_effect_bitset()) &&
           verifier.EndTable();
  }
};

struct ActionBuilder {
  typedef Action Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_applicability_positive_precondition_bitset(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> applicability_positive_precondition_bitset) {
    fbb_.AddOffset(Action::VT_APPLICABILITY_POSITIVE_PRECONDITION_BITSET, applicability_positive_precondition_bitset);
  }
  void add_applicability_negative_precondition_bitset(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> applicability_negative_precondition_bitset) {
    fbb_.AddOffset(Action::VT_APPLICABILITY_NEGATIVE_PRECONDITION_BITSET, applicability_negative_precondition_bitset);
  }
  void add_unconditional_positive_effect_bitset(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> unconditional_positive_effect_bitset) {
    fbb_.AddOffset(Action::VT_UNCONDITIONAL_POSITIVE_EFFECT_BITSET, unconditional_positive_effect_bitset);
  }
  void add_unconditional_negative_effect_bitset(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> unconditional_negative_effect_bitset) {
    fbb_.AddOffset(Action::VT_UNCONDITIONAL_NEGATIVE_EFFECT_BITSET, unconditional_negative_effect_bitset);
  }
  explicit ActionBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Action> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Action>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Action> CreateAction(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> applicability_positive_precondition_bitset = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> applicability_negative_precondition_bitset = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> unconditional_positive_effect_bitset = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> unconditional_negative_effect_bitset = 0) {
  ActionBuilder builder_(_fbb);
  builder_.add_unconditional_negative_effect_bitset(unconditional_negative_effect_bitset);
  builder_.add_unconditional_positive_effect_bitset(unconditional_positive_effect_bitset);
  builder_.add_applicability_negative_precondition_bitset(applicability_negative_precondition_bitset);
  builder_.add_applicability_positive_precondition_bitset(applicability_positive_precondition_bitset);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Action> CreateActionDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *applicability_positive_precondition_bitset = nullptr,
    const std::vector<uint64_t> *applicability_negative_precondition_bitset = nullptr,
    const std::vector<uint64_t> *unconditional_positive_effect_bitset = nullptr,
    const std::vector<uint64_t> *unconditional_negative_effect_bitset = nullptr) {
  auto applicability_positive_precondition_bitset__ = applicability_positive_precondition_bitset ? _fbb.CreateVector<uint64_t>(*applicability_positive_precondition_bitset) : 0;
  auto applicability_negative_precondition_bitset__ = applicability_negative_precondition_bitset ? _fbb.CreateVector<uint64_t>(*applicability_negative_precondition_bitset) : 0;
  auto unconditional_positive_effect_bitset__ = unconditional_positive_effect_bitset ? _fbb.CreateVector<uint64_t>(*unconditional_positive_effect_bitset) : 0;
  auto unconditional_negative_effect_bitset__ = unconditional_negative_effect_bitset ? _fbb.CreateVector<uint64_t>(*unconditional_negative_effect_bitset) : 0;
  return mimir::CreateAction(
      _fbb,
      applicability_positive_precondition_bitset__,
      applicability_negative_precondition_bitset__,
      unconditional_positive_effect_bitset__,
      unconditional_negative_effect_bitset__);
}

inline const mimir::Action *GetAction(const void *buf) {
  return ::flatbuffers::GetRoot<mimir::Action>(buf);
}

inline const mimir::Action *GetSizePrefixedAction(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<mimir::Action>(buf);
}

inline bool VerifyActionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mimir::Action>(nullptr);
}

inline bool VerifySizePrefixedActionBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mimir::Action>(nullptr);
}

inline void FinishActionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::Action> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedActionBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::Action> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace mimir

#endif  // FLATBUFFERS_GENERATED_ACTION_MIMIR_H_
