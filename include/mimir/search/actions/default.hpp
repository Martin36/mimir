#ifndef MIMIR_SEARCH_ACTIONS_DEFAULT_HPP_
#define MIMIR_SEARCH_ACTIONS_DEFAULT_HPP_

#include "template.hpp"


namespace mimir
{

/**
 * Derived ID class.
 *
 * Define name and template parameters of your own implementation.
*/
class DefaultActionTag : public ActionBaseTag {};


/**
 * Dispatcher class.
 *
 * Define the required template arguments of your implementation.
*/
template<IsActionTag A, IsPlanningModeTag P, IsStateTag S>
struct is_action_dispatcher<ActionDispatcher<A, P, S>> : std::true_type {};


/**
 * Aliases
*/
template<IsPlanningModeTag P, IsStateTag S>
using DefaultActionBuilder = Builder<ActionDispatcher<DefaultActionTag, P, S>>;

template<IsPlanningModeTag P, IsStateTag S>
using DefaultActionView = View<ActionDispatcher<DefaultActionTag, P, S>>;


/**
 * Type traits.
*/
template<IsPlanningModeTag P, IsStateTag S>
struct TypeTraits<DefaultActionBuilder<P, S>> {
    using PlanningModeTag = P;
    using StateTag = S;
};

template<IsPlanningModeTag P, IsStateTag S>
struct TypeTraits<DefaultActionView<P, S>> {
    using PlanningModeTag = P;
    using StateTag = S;
};


/**
 * Interface class
*/
template<typename Derived>
class DefaultActionBuilderBase {
private:
    using P = typename TypeTraits<Derived>::PlanningModeTag;
    using S = typename TypeTraits<Derived>::StateTag;

    DefaultActionBuilderBase() = default;
    friend Derived;

    /// @brief Helper to cast to Derived.
    constexpr const auto& self() const { return static_cast<const Derived&>(*this); }
    constexpr auto& self() { return static_cast<Derived&>(*this); }

public:
};


/**
 * Implementation class
 *
 * The search node builder extends the builder base memory layout as follows:
 *  ____________________________________________________________________
 * |                |        |         |              |                 |
 * | data_size_type | status | g_value | parent_state | creating_action |
 * |________________|________|_________|______________|_________________|
*/
template<IsPlanningModeTag P, IsStateTag S>
class Builder<ActionDispatcher<DefaultActionTag, P, S>>
    : public BuilderBase<Builder<ActionDispatcher<DefaultActionTag, P, S>>>
    , public DefaultActionBuilderBase<Builder<ActionDispatcher<DefaultActionTag, P, S>>> {
private:

    /* Implement BuilderBase interface */
    data_size_type calculate_size_impl() const {
        return 0;
    }

    void finish_impl() {
    }

    // Give access to the private interface implementations.
    template<typename>
    friend class BuilderBase;

    /* Implement DefaultActionBuilderBase interface */

    // Give access to the private interface implementations.
    template<typename>
    friend class DefaultActionBuilderBase;

public:
};


/**
 * Interface class
*/
template<typename Derived>
class DefaultActionViewBase {
private:
    using P = typename TypeTraits<Derived>::PlanningModeTag;
    using S = typename TypeTraits<Derived>::StateTag;

    DefaultActionViewBase() = default;
    friend Derived;

    /// @brief Helper to cast to Derived.
    constexpr const auto& self() const { return static_cast<const Derived&>(*this); }
    constexpr auto& self() { return static_cast<Derived&>(*this); }

public:
    /* Mutable getters. */

    /* Immutable getters. */
    std::string str() const { return self().str_impl(); }
};


/**
 * Implementation class
 *
 * Reads the memory layout generated by the search node builder.
*/
template<IsPlanningModeTag P, IsStateTag S>
class View<ActionDispatcher<DefaultActionTag, P, S>>
    : public ViewBase<View<ActionDispatcher<DefaultActionTag, P, S>>>
    , public DefaultActionViewBase<View<ActionDispatcher<DefaultActionTag, P, S>>> {
private:

    static constexpr size_t s_status_offset =       sizeof(data_size_type);
    /* Implement ViewBase interface: */
    [[nodiscard]] size_t get_offset_to_representative_data_impl() const { return 0; }

    /* Implement DefaultActionViewBase interface */

    // Give access to the private interface implementations.
    template<typename>
    friend class DefaultActionViewBase;

public:
    /// @brief Create a view on a DefaultAction.
    explicit View(char* data) : ViewBase<View<ActionDispatcher<DefaultActionTag, P, S>>>(data) { }

    std::string str_impl() const { return "some_action"; }
};



}  // namespace mimir

#endif  // MIMIR_SEARCH_ACTIONS_DEFAULT_HPP_
