#ifndef MIMIR_SEARCH_AXIOMS_DENSE_HPP_
#define MIMIR_SEARCH_AXIOMS_DENSE_HPP_

#include "mimir/search/axioms/interface.hpp"
#include "mimir/search/type_traits.hpp"
#include "mimir/search/types.hpp"

namespace flat
{
/**
 * Flatmemory types
 */
using DenseAxiomLayout = flatmemory::Tuple<uint32_t, mimir::Axiom, ObjectListLayout, BitsetLayout, BitsetLayout, int32_t>;
using DenseAxiomBuilder = flatmemory::Builder<DenseAxiomLayout>;
using DenseAxiom = flatmemory::ConstView<DenseAxiomLayout>;
using DenseAxiomVector = flatmemory::VariableSizedTypeVector<DenseAxiomLayout>;

struct DenseAxiomHash
{
    size_t operator()(const DenseAxiom& view) const
    {
        const auto axiom = view.get<1>();
        const auto objects = view.get<2>();
        return loki::hash_combine(axiom, objects.hash());
    }
};

struct DenseAxiomEqual
{
    bool operator()(const DenseAxiom& view_left, const DenseAxiom& view_right) const
    {
        const auto axiom_left = view_left.get<1>();
        const auto objects_left = view_left.get<2>();
        const auto axiom_right = view_right.get<1>();
        const auto objects_right = view_right.get<2>();
        return (axiom_left == axiom_right) && (objects_left == objects_right);
    }
};

using DenseAxiomSet = flatmemory::UnorderedSet<DenseAxiomLayout, DenseAxiomHash, DenseAxiomEqual>;
}

namespace mimir
{

/**
 * Implementation class
 */
template<>
class Builder<AxiomDispatcher<DenseStateTag>> :
    public IBuilder<Builder<AxiomDispatcher<DenseStateTag>>>,
    public IAxiomBuilder<Builder<AxiomDispatcher<DenseStateTag>>>
{
private:
    flat::DenseAxiomBuilder m_builder;

    /* Implement IBuilder interface */
    friend class IBuilder<Builder<AxiomDispatcher<DenseStateTag>>>;

    [[nodiscard]] flat::DenseAxiomBuilder& get_flatmemory_builder_impl() { return m_builder; }
    [[nodiscard]] const flat::DenseAxiomBuilder& get_flatmemory_builder_impl() const { return m_builder; }

    /* Implement IAxiomBuilder interface */
    friend class IAxiomBuilder<Builder<AxiomDispatcher<DenseStateTag>>>;

public:
    /// @brief Modify the data, call finish, then copy the buffer to a container and use its returned view.
    [[nodiscard]] uint32_t& get_id() { return m_builder.get<0>(); }
    [[nodiscard]] Axiom& get_axiom() { return m_builder.get<1>(); }
    [[nodiscard]] flat::ObjectListBuilder& get_objects() { return m_builder.get<2>(); }
    /* Precondition */
    [[nodiscard]] flat::BitsetBuilder& get_positive_precondition_bitset() { return m_builder.get<3>(); }
    [[nodiscard]] flat::BitsetBuilder& get_negative_precondition_bitset() { return m_builder.get<4>(); }
    /* Simple effect */
    // We use positive numbers for add and negative numbers for delete effects
    [[nodiscard]] int32_t& get_simple_effect() { return m_builder.get<5>(); }
};

/**
 * Implementation class
 *
 * Reads the memory layout generated by the search node builder.
 */
template<>
class ConstView<AxiomDispatcher<DenseStateTag>> :
    public IConstView<ConstView<AxiomDispatcher<DenseStateTag>>>,
    public IAxiomView<ConstView<AxiomDispatcher<DenseStateTag>>>
{
private:
    using DenseState = ConstView<StateDispatcher<DenseStateTag>>;

    flat::DenseAxiom m_view;

    /* Implement IView interface: */
    friend class IConstView<ConstView<AxiomDispatcher<DenseStateTag>>>;

    /// @brief Compute equality based on the lifted action and the objects assigned to the parameters.
    [[nodiscard]] bool are_equal_impl(const ConstView& other) const { return get_axiom() == other.get_axiom() && get_objects() == other.get_objects(); }

    /// @brief Compute hash based on the lifted action and the objects assigned to the parameters.
    [[nodiscard]] size_t hash_impl() const { return loki::hash_combine(get_axiom(), get_objects().hash()); }

    /* Implement IAxiomView interface */
    friend class IAxiomView<ConstView<AxiomDispatcher<DenseStateTag>>>;

public:
    /// @brief Create a view on a Axiom.
    explicit ConstView(flat::DenseAxiom view) : m_view(view) {}

    [[nodiscard]] uint32_t get_id() const { return m_view.get<0>(); }
    [[nodiscard]] Axiom get_axiom() const { return m_view.get<1>(); }
    [[nodiscard]] flat::ObjectList get_objects() const { return m_view.get<2>(); }
    /* Precondition */
    [[nodiscard]] flat::Bitset get_positive_precondition_bitset() const { return m_view.get<3>(); }
    [[nodiscard]] flat::Bitset get_negative_precondition_bitset() const { return m_view.get<4>(); }
    /* Effect*/
    [[nodiscard]] int32_t get_simple_effect() const { return m_view.get<5>(); }

    [[nodiscard]] bool is_applicable(DenseState state) const
    {
        const auto state_bitset = state.get_atoms_bitset();
        return state_bitset.is_superseteq(get_positive_precondition_bitset()) && state_bitset.are_disjoint(get_negative_precondition_bitset());
    }
};

/**
 * Mimir types
 */
using DenseAxiomBuilder = Builder<AxiomDispatcher<DenseStateTag>>;
using DenseAxiom = ConstView<AxiomDispatcher<DenseStateTag>>;
using DenseAxiomList = std::vector<DenseAxiom>;

}

#endif
