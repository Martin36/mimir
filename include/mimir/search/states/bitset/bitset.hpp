#ifndef MIMIR_SEARCH_STATES_BITSET_BITSET_HPP_
#define MIMIR_SEARCH_STATES_BITSET_BITSET_HPP_

#include "interface.hpp"


namespace mimir 
{
    /**
     * Types
    */
    using BitsetStateLayout = flatmemory::Tuple<uint32_t, BitsetLayout>;

    using BitsetStateBuilder = flatmemory::Builder<BitsetStateLayout>;
    using BitsetStateView = flatmemory::ConstView<BitsetStateLayout>;
    using BitsetStateSet = flatmemory::UnorderedSet<BitsetStateLayout>;
}


namespace std
{
    template<>
    struct hash<mimir::BitsetStateView>
    {
        std::size_t operator()(const mimir::BitsetStateView& view) const {
            return view.hash();
        }
    };

    template<>
    struct equal_to<mimir::BitsetStateView>
    {
        bool operator()(const mimir::BitsetStateView& view_left, const mimir::BitsetStateView& view_right) const {
            return view_left == view_right;
        }
    };
}

namespace mimir
{
    /**
     * Implementation class
    */
    template<IsPlanningModeTag P>
    class Builder<StateDispatcher<BitsetStateTag, P>>
        : public IBuilder<Builder<StateDispatcher<BitsetStateTag, P>>>
        , public IStateBuilder<Builder<StateDispatcher<BitsetStateTag, P>>>
        , public IBitsetStateBuilder<Builder<StateDispatcher<BitsetStateTag, P>>>
    {
    private:
        BitsetStateBuilder m_builder;

        /* Implement IBuilder interface */
        template<typename>
        friend class IBuilder;

        [[nodiscard]] BitsetStateBuilder& get_flatmemory_builder_impl() { return m_builder; }
        [[nodiscard]] const BitsetStateBuilder& get_flatmemory_builder_impl() const { return m_builder; }

        /* Implement IStateBuilder interface */
        template<typename>
        friend class IStateBuilder;

        [[nodiscard]] uint32_t& get_id_impl() { return m_builder.get<0>(); }


        /* Implement IBitsetStateBuilder interface */
        template<typename>
        friend class IBitsetStateBuilder;

        [[nodiscard]] Bitset& get_atoms_bitset_impl() { return m_builder.get<1>(); }
    };


    /**
     * Implementation class
     *
     * Reads the memory layout generated by the lifted state builder.
    */
    template<IsPlanningModeTag P>
    class View<StateDispatcher<BitsetStateTag, P>>
        : public IView<View<StateDispatcher<BitsetStateTag, P>>>
        , public IStateView<View<StateDispatcher<BitsetStateTag, P>>>
        , public IBitsetStateView<View<StateDispatcher<BitsetStateTag, P>>>
    {
    private:
        BitsetStateView m_view;

        /* Implement IView interface */
        template<typename>
        friend class IView;

        [[nodiscard]] bool are_equal_impl(const View& other) const {
            return get_atoms_bitset_impl() == other.get_atoms_bitset_impl();
        }

        [[nodiscard]] size_t hash_impl() const {
            return get_atoms_bitset_impl().hash();
        }

        /* Implement IStateView interface */
        template<typename>
        friend class IStateView;

        [[nodiscard]] uint32_t get_id_impl() const { return m_view.get<0>(); }


        /* Implement IBitsetStateView interface*/
        template<typename>
        friend class IBitsetStateView;

        [[nodiscard]] ConstBitsetView get_atoms_bitset_impl() const { return m_view.get<1>(); }

    public:
        explicit View(BitsetStateView view) : m_view(view) { }
    };
}

#endif
