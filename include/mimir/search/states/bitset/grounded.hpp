#ifndef MIMIR_SEARCH_STATES_BITSET_GROUNDED_HPP_
#define MIMIR_SEARCH_STATES_BITSET_GROUNDED_HPP_

#include "interface.hpp"

#include "../../../buffer/flatbuffers/state-bitset-grounded_generated.h"


namespace mimir
{

/**
 * Implementation class
*/
template<>
class Builder<StateDispatcher<BitsetStateTag, GroundedTag>>
    : public IBuilderBase<Builder<StateDispatcher<BitsetStateTag, GroundedTag>>>
    , public IStateBuilder<Builder<StateDispatcher<BitsetStateTag, GroundedTag>>>
    , public IBitsetStateBuilder<Builder<StateDispatcher<BitsetStateTag, GroundedTag>>>
{
private:
    flatbuffers::FlatBufferBuilder m_flatbuffers_builder;

    uint32_t m_id;
    BitsetBuilder<uint64_t> m_atoms_bitset;

    /* Implement IBuilderBase interface */
    template<typename>
    friend class IBuilderBase;

    void finish_impl() {
        auto created_atoms_vec = this->m_flatbuffers_builder.CreateVector(m_atoms_bitset.get_data());
        auto bitset = CreateBitsetFlat(m_flatbuffers_builder, m_atoms_bitset.get_data().size(), created_atoms_vec);
        auto builder = StateBitsetGroundedFlatBuilder(this->m_flatbuffers_builder);
        builder.add_id(m_id);
        builder.add_atoms(bitset);
        this->m_flatbuffers_builder.FinishSizePrefixed(builder.Finish());
    }

    void clear_impl() {
        m_flatbuffers_builder.Clear();
        m_atoms_bitset.clear();
    }

    [[nodiscard]] uint8_t* get_buffer_pointer_impl() { return m_flatbuffers_builder.GetBufferPointer(); }
    [[nodiscard]] const uint8_t* get_buffer_pointer_impl() const { return m_flatbuffers_builder.GetBufferPointer(); }
    [[nodiscard]] uint32_t get_size_impl() const { return *reinterpret_cast<const flatbuffers::uoffset_t*>(this->get_buffer_pointer()) + sizeof(flatbuffers::uoffset_t); }


    /* Implement IStateBuilder interface */
    template<typename>
    friend class IStateBuilder;

    void set_id_impl(uint32_t id) { m_id = id; }


    /* Implement IBitsetStateBuilder interface */
    template<typename>
    friend class IBitsetStateBuilder;

    void set_num_atoms_impl(size_t num_atoms) { m_atoms_bitset.set_num_bits(num_atoms); }
};


/**
 * Implementation class
 *
 * Reads the memory layout generated by the lifted state builder.
*/
template<>
class View<StateDispatcher<BitsetStateTag, GroundedTag>>
    : public ViewBase<View<StateDispatcher<BitsetStateTag, GroundedTag>>>
    , public IStateView<View<StateDispatcher<BitsetStateTag, GroundedTag>>>
    , public IBitsetStateView<View<StateDispatcher<BitsetStateTag, GroundedTag>>>
{
private:
    const StateBitsetGroundedFlat* m_flatbuffers_view;

    /* Implement ViewBase interface */
    template<typename>
    friend class ViewBase;

    [[nodiscard]] bool are_equal_impl(const View& other) const {
        // TODO: implement when we have data members.
        return true;
    }

    /// @brief Hash the representative data.
    [[nodiscard]] size_t hash_impl() const {
        // TODO: implement when we have data members.
        return 0;
    }


    /* Implement IStateView interface */
    template<typename>
    friend class IStateView;

    [[nodiscard]] uint32_t get_id_impl() const { return m_flatbuffers_view->id(); }


    /* Implement IBitsetStateView interface*/
    template<typename>
    friend class IBitsetStateView;

    [[nodiscard]] BitsetView get_atoms_impl() const { return BitsetView(m_flatbuffers_view->atoms()); }

public:
    explicit View(uint8_t* data)
        : ViewBase<View<StateDispatcher<BitsetStateTag, GroundedTag>>>(data)
        , m_flatbuffers_view(data ? GetSizePrefixedStateBitsetGroundedFlat(reinterpret_cast<void*>(data)) : nullptr) { }
};


}

#endif
