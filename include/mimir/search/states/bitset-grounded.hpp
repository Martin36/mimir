#ifndef MIMIR_SEARCH_STATES_BITSET_GROUNDED_HPP_
#define MIMIR_SEARCH_STATES_BITSET_GROUNDED_HPP_

#include "bitset.hpp"

#include "../../buffer/flatbuffers/search/states/bitset-grounded_generated.h"


namespace mimir
{

/**
 * Implementation class
 *
 * The lifted state builder extends the builder base memory layout as follows:
 *  __________________________________
 * |                |          |      |
 * | data_size_type | state_id | TODO |
 * |________________|__________|______|
 *
 *
*/
template<>
class Builder<StateDispatcher<BitsetStateTag, GroundedTag>>
    : public BuilderBase<Builder<StateDispatcher<BitsetStateTag, GroundedTag>>>
    , public StateBuilderBase<Builder<StateDispatcher<BitsetStateTag, GroundedTag>>> {

private:
    flatbuffers::FlatBufferBuilder m_flatbuffers_builder;
    StateBitsetGroundedFlatBuilder m_state_builder;

    uint32_t m_id;

    /* Implement BuilderBase interface */
    void finish_impl() {
        m_flatbuffers_builder.FinishSizePrefixed(m_state_builder.Finish());
    }

    uint8_t* get_buffer_pointer_impl() {
        return m_flatbuffers_builder.GetBufferPointer();
    }

    const uint8_t* get_buffer_pointer_impl() const {
        return m_flatbuffers_builder.GetBufferPointer();
    }

    void clear_impl() {
        m_flatbuffers_builder.Clear();
    }

    template<typename>
    friend class BuilderBase;

    /* Implement StateBuilderBase interface */
    void set_id_impl(uint32_t id) { m_state_builder.add_id(id); }

    template<typename>
    friend class StateBuilderBase;

public:
    Builder()
        : m_flatbuffers_builder(1024)
        , m_state_builder(m_flatbuffers_builder) { }
};


/**
 * Implementation class
 *
 * Reads the memory layout generated by the lifted state builder.
*/
template<>
class View<StateDispatcher<BitsetStateTag, GroundedTag>>
    : public ViewBase<View<StateDispatcher<BitsetStateTag, GroundedTag>>>
    , public StateViewBase<View<StateDispatcher<BitsetStateTag, GroundedTag>>> {
private:
    const StateBitsetGroundedFlat* m_flatbuffers_view;

    /* Implement ViewBase interface */

    // Give access to the private interface implementations.
    template<typename>
    friend class ViewBase;

    /* Implement SearchNodeViewBase interface */
    [[nodiscard]] uint32_t get_id_impl() const {
        return m_flatbuffers_view->id();
    }

    // Give access to the private interface implementations.
    template<typename>
    friend class StateViewBase;

public:
    explicit View(uint8_t* data)
        : ViewBase<View<StateDispatcher<BitsetStateTag, GroundedTag>>>(data)
        , m_flatbuffers_view(GetSizePrefixedStateBitsetGroundedFlat(reinterpret_cast<void*>(data))) { }
};


}  // namespace mimir

#endif  // MIMIR_SEARCH_STATES_BITSET_GROUNDED_HPP_
