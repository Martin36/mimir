#ifndef MIMIR_SEARCH_STATES_BITSET_GROUNDED_HPP_
#define MIMIR_SEARCH_STATES_BITSET_GROUNDED_HPP_

#include "bitset.hpp"

#include "../../buffer/flatbuffers/search/states/bitset-grounded_generated.h"


namespace mimir
{

/**
 * Type traits
*/
template<>
struct TypeTraits<Builder<StateDispatcher<BitsetStateTag, GroundedTag>>> {
    using PlanningModeTag = GroundedTag;
    using TypeFlatBuilder = StateBitsetGroundedFlatBuilder;
};

/**
 * Implementation class
*/
template<>
class Builder<StateDispatcher<BitsetStateTag, GroundedTag>>
    : public BuilderBase<Builder<StateDispatcher<BitsetStateTag, GroundedTag>>>
    , public StateBuilderBase<Builder<StateDispatcher<BitsetStateTag, GroundedTag>>> {

private:
    // TODO: wrap this into a bitset.
    std::vector<uint64_t> m_atoms;

    /* Implement BuilderBase interface */
    template<typename>
    friend class BuilderBase;

    /* Implement StateBuilderBase interface */
    template<typename>
    friend class StateBuilderBase;

    void set_id_impl(uint32_t id) { this->m_type_builder.add_id(id); }
    void set_atoms_impl() { this->m_type_builder.add_atoms(this->m_flatbuffers_builder.CreateVector(m_atoms)); }
};


/**
 * Implementation class
 *
 * Reads the memory layout generated by the lifted state builder.
*/
template<>
class View<StateDispatcher<BitsetStateTag, GroundedTag>>
    : public ViewBase<View<StateDispatcher<BitsetStateTag, GroundedTag>>>
    , public StateViewBase<View<StateDispatcher<BitsetStateTag, GroundedTag>>> {
private:
    const StateBitsetGroundedFlat* m_flatbuffers_view;

    /* Implement ViewBase interface */
    template<typename>
    friend class ViewBase;

    [[nodiscard]] bool are_equal_impl(const View& other) const {
        // TODO: implement when we have data members.
        return true;
    }

    /// @brief Hash the representative data.
    [[nodiscard]] size_t hash_impl() const {
        // TODO: implement when we have data members.
        return 0;
    }


    /* Implement SearchNodeViewBase interface */
    template<typename>
    friend class StateViewBase;

    [[nodiscard]] uint32_t get_id_impl() const {
        return m_flatbuffers_view->id();
    }

public:
    explicit View(uint8_t* data)
        : ViewBase<View<StateDispatcher<BitsetStateTag, GroundedTag>>>(data)
        , m_flatbuffers_view(GetSizePrefixedStateBitsetGroundedFlat(reinterpret_cast<void*>(data))) { }
};


}  // namespace mimir

#endif  // MIMIR_SEARCH_STATES_BITSET_GROUNDED_HPP_
