// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BITSET_MIMIR_H_
#define FLATBUFFERS_GENERATED_BITSET_MIMIR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace mimir {

struct BitsetFlat;
struct BitsetFlatBuilder;

struct BitsetFlat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef BitsetFlatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEFAULT_VALUE = 4,
    VT_SEGMENTS = 6
  };
  bool default_value() const {
    return GetField<uint8_t>(VT_DEFAULT_VALUE, 0) != 0;
  }
  const ::flatbuffers::Vector<uint64_t> *segments() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_SEGMENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_DEFAULT_VALUE, 1) &&
           VerifyOffset(verifier, VT_SEGMENTS) &&
           verifier.VerifyVector(segments()) &&
           verifier.EndTable();
  }
};

struct BitsetFlatBuilder {
  typedef BitsetFlat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_default_value(bool default_value) {
    fbb_.AddElement<uint8_t>(BitsetFlat::VT_DEFAULT_VALUE, static_cast<uint8_t>(default_value), 0);
  }
  void add_segments(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> segments) {
    fbb_.AddOffset(BitsetFlat::VT_SEGMENTS, segments);
  }
  explicit BitsetFlatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<BitsetFlat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<BitsetFlat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<BitsetFlat> CreateBitsetFlat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool default_value = false,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> segments = 0) {
  BitsetFlatBuilder builder_(_fbb);
  builder_.add_segments(segments);
  builder_.add_default_value(default_value);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<BitsetFlat> CreateBitsetFlatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    bool default_value = false,
    const std::vector<uint64_t> *segments = nullptr) {
  auto segments__ = segments ? _fbb.CreateVector<uint64_t>(*segments) : 0;
  return mimir::CreateBitsetFlat(
      _fbb,
      default_value,
      segments__);
}

inline const mimir::BitsetFlat *GetBitsetFlat(const void *buf) {
  return ::flatbuffers::GetRoot<mimir::BitsetFlat>(buf);
}

inline const mimir::BitsetFlat *GetSizePrefixedBitsetFlat(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<mimir::BitsetFlat>(buf);
}

inline bool VerifyBitsetFlatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mimir::BitsetFlat>(nullptr);
}

inline bool VerifySizePrefixedBitsetFlatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mimir::BitsetFlat>(nullptr);
}

inline void FinishBitsetFlatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::BitsetFlat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedBitsetFlatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::BitsetFlat> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace mimir

#endif  // FLATBUFFERS_GENERATED_BITSET_MIMIR_H_
