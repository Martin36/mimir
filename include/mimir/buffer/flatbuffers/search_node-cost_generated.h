// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SEARCHNODECOST_MIMIR_H_
#define FLATBUFFERS_GENERATED_SEARCHNODECOST_MIMIR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace mimir {

struct CostSearchNodeDataFlat;

struct CostSearchNodeFlat;
struct CostSearchNodeFlatBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) CostSearchNodeDataFlat FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t status_;
  int8_t padding0__;  int16_t padding1__;
  int32_t g_value_;
  uint64_t state_;
  uint64_t action_;

 public:
  CostSearchNodeDataFlat()
      : status_(0),
        padding0__(0),
        padding1__(0),
        g_value_(0),
        state_(0),
        action_(0) {
    (void)padding0__;
    (void)padding1__;
  }
  CostSearchNodeDataFlat(uint8_t _status, int32_t _g_value, uint64_t _state, uint64_t _action)
      : status_(::flatbuffers::EndianScalar(_status)),
        padding0__(0),
        padding1__(0),
        g_value_(::flatbuffers::EndianScalar(_g_value)),
        state_(::flatbuffers::EndianScalar(_state)),
        action_(::flatbuffers::EndianScalar(_action)) {
    (void)padding0__;
    (void)padding1__;
  }
  uint8_t status() const {
    return ::flatbuffers::EndianScalar(status_);
  }
  void mutate_status(uint8_t _status) {
    ::flatbuffers::WriteScalar(&status_, _status);
  }
  int32_t g_value() const {
    return ::flatbuffers::EndianScalar(g_value_);
  }
  void mutate_g_value(int32_t _g_value) {
    ::flatbuffers::WriteScalar(&g_value_, _g_value);
  }
  uint64_t state() const {
    return ::flatbuffers::EndianScalar(state_);
  }
  void mutate_state(uint64_t _state) {
    ::flatbuffers::WriteScalar(&state_, _state);
  }
  uint64_t action() const {
    return ::flatbuffers::EndianScalar(action_);
  }
  void mutate_action(uint64_t _action) {
    ::flatbuffers::WriteScalar(&action_, _action);
  }
};
FLATBUFFERS_STRUCT_END(CostSearchNodeDataFlat, 24);

struct CostSearchNodeFlat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CostSearchNodeFlatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DATA = 4
  };
  const mimir::CostSearchNodeDataFlat *data() const {
    return GetStruct<const mimir::CostSearchNodeDataFlat *>(VT_DATA);
  }
  mimir::CostSearchNodeDataFlat *mutable_data() {
    return GetStruct<mimir::CostSearchNodeDataFlat *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<mimir::CostSearchNodeDataFlat>(verifier, VT_DATA, 8) &&
           verifier.EndTable();
  }
};

struct CostSearchNodeFlatBuilder {
  typedef CostSearchNodeFlat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_data(const mimir::CostSearchNodeDataFlat *data) {
    fbb_.AddStruct(CostSearchNodeFlat::VT_DATA, data);
  }
  explicit CostSearchNodeFlatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CostSearchNodeFlat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CostSearchNodeFlat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CostSearchNodeFlat> CreateCostSearchNodeFlat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const mimir::CostSearchNodeDataFlat *data = nullptr) {
  CostSearchNodeFlatBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline const mimir::CostSearchNodeFlat *GetCostSearchNodeFlat(const void *buf) {
  return ::flatbuffers::GetRoot<mimir::CostSearchNodeFlat>(buf);
}

inline const mimir::CostSearchNodeFlat *GetSizePrefixedCostSearchNodeFlat(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<mimir::CostSearchNodeFlat>(buf);
}

inline CostSearchNodeFlat *GetMutableCostSearchNodeFlat(void *buf) {
  return ::flatbuffers::GetMutableRoot<CostSearchNodeFlat>(buf);
}

inline mimir::CostSearchNodeFlat *GetMutableSizePrefixedCostSearchNodeFlat(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<mimir::CostSearchNodeFlat>(buf);
}

inline bool VerifyCostSearchNodeFlatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mimir::CostSearchNodeFlat>(nullptr);
}

inline bool VerifySizePrefixedCostSearchNodeFlatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mimir::CostSearchNodeFlat>(nullptr);
}

inline void FinishCostSearchNodeFlatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::CostSearchNodeFlat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCostSearchNodeFlatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::CostSearchNodeFlat> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace mimir

#endif  // FLATBUFFERS_GENERATED_SEARCHNODECOST_MIMIR_H_
