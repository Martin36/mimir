// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SEARCHNODESTATUS_H_
#define FLATBUFFERS_GENERATED_SEARCHNODESTATUS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

enum SearchNodeStatusFlat : int8_t {
  SearchNodeStatusFlat_NEW = 0,
  SearchNodeStatusFlat_OPEN = 1,
  SearchNodeStatusFlat_CLOSED = 2,
  SearchNodeStatusFlat_DEAD_END = 3,
  SearchNodeStatusFlat_MIN = SearchNodeStatusFlat_NEW,
  SearchNodeStatusFlat_MAX = SearchNodeStatusFlat_DEAD_END
};

inline const SearchNodeStatusFlat (&EnumValuesSearchNodeStatusFlat())[4] {
  static const SearchNodeStatusFlat values[] = {
    SearchNodeStatusFlat_NEW,
    SearchNodeStatusFlat_OPEN,
    SearchNodeStatusFlat_CLOSED,
    SearchNodeStatusFlat_DEAD_END
  };
  return values;
}

inline const char * const *EnumNamesSearchNodeStatusFlat() {
  static const char * const names[5] = {
    "NEW",
    "OPEN",
    "CLOSED",
    "DEAD_END",
    nullptr
  };
  return names;
}

inline const char *EnumNameSearchNodeStatusFlat(SearchNodeStatusFlat e) {
  if (::flatbuffers::IsOutRange(e, SearchNodeStatusFlat_NEW, SearchNodeStatusFlat_DEAD_END)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSearchNodeStatusFlat()[index];
}

#endif  // FLATBUFFERS_GENERATED_SEARCHNODESTATUS_H_
