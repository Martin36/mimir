// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COST_MIMIR_H_
#define FLATBUFFERS_GENERATED_COST_MIMIR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

#include "status_generated.h"

namespace mimir {

struct CostSearchNodeFlat;
struct CostSearchNodeFlatBuilder;

struct CostSearchNodeFlat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CostSearchNodeFlatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_STATUS = 4,
    VT_G_VALUE = 6,
    VT_STATE = 8,
    VT_ACTION = 10
  };
  SearchNodeStatusFlat status() const {
    return static_cast<SearchNodeStatusFlat>(GetField<int8_t>(VT_STATUS, 0));
  }
  bool mutate_status(SearchNodeStatusFlat _status = static_cast<SearchNodeStatusFlat>(0)) {
    return SetField<int8_t>(VT_STATUS, static_cast<int8_t>(_status), 0);
  }
  int32_t g_value() const {
    return GetField<int32_t>(VT_G_VALUE, 0);
  }
  bool mutate_g_value(int32_t _g_value = 0) {
    return SetField<int32_t>(VT_G_VALUE, _g_value, 0);
  }
  uint64_t state() const {
    return GetField<uint64_t>(VT_STATE, 0);
  }
  bool mutate_state(uint64_t _state = 0) {
    return SetField<uint64_t>(VT_STATE, _state, 0);
  }
  uint64_t action() const {
    return GetField<uint64_t>(VT_ACTION, 0);
  }
  bool mutate_action(uint64_t _action = 0) {
    return SetField<uint64_t>(VT_ACTION, _action, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_STATUS, 1) &&
           VerifyField<int32_t>(verifier, VT_G_VALUE, 4) &&
           VerifyField<uint64_t>(verifier, VT_STATE, 8) &&
           VerifyField<uint64_t>(verifier, VT_ACTION, 8) &&
           verifier.EndTable();
  }
};

struct CostSearchNodeFlatBuilder {
  typedef CostSearchNodeFlat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_status(SearchNodeStatusFlat status) {
    fbb_.AddElement<int8_t>(CostSearchNodeFlat::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_g_value(int32_t g_value) {
    fbb_.AddElement<int32_t>(CostSearchNodeFlat::VT_G_VALUE, g_value, 0);
  }
  void add_state(uint64_t state) {
    fbb_.AddElement<uint64_t>(CostSearchNodeFlat::VT_STATE, state, 0);
  }
  void add_action(uint64_t action) {
    fbb_.AddElement<uint64_t>(CostSearchNodeFlat::VT_ACTION, action, 0);
  }
  explicit CostSearchNodeFlatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<CostSearchNodeFlat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<CostSearchNodeFlat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<CostSearchNodeFlat> CreateCostSearchNodeFlat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    SearchNodeStatusFlat status = SearchNodeStatusFlat_NEW,
    int32_t g_value = 0,
    uint64_t state = 0,
    uint64_t action = 0) {
  CostSearchNodeFlatBuilder builder_(_fbb);
  builder_.add_action(action);
  builder_.add_state(state);
  builder_.add_g_value(g_value);
  builder_.add_status(status);
  return builder_.Finish();
}

inline const mimir::CostSearchNodeFlat *GetCostSearchNodeFlat(const void *buf) {
  return ::flatbuffers::GetRoot<mimir::CostSearchNodeFlat>(buf);
}

inline const mimir::CostSearchNodeFlat *GetSizePrefixedCostSearchNodeFlat(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<mimir::CostSearchNodeFlat>(buf);
}

inline CostSearchNodeFlat *GetMutableCostSearchNodeFlat(void *buf) {
  return ::flatbuffers::GetMutableRoot<CostSearchNodeFlat>(buf);
}

inline mimir::CostSearchNodeFlat *GetMutableSizePrefixedCostSearchNodeFlat(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<mimir::CostSearchNodeFlat>(buf);
}

inline bool VerifyCostSearchNodeFlatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mimir::CostSearchNodeFlat>(nullptr);
}

inline bool VerifySizePrefixedCostSearchNodeFlatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mimir::CostSearchNodeFlat>(nullptr);
}

inline void FinishCostSearchNodeFlatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::CostSearchNodeFlat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCostSearchNodeFlatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::CostSearchNodeFlat> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace mimir

#endif  // FLATBUFFERS_GENERATED_COST_MIMIR_H_
