// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BITSETLIFTED_MIMIR_H_
#define FLATBUFFERS_GENERATED_BITSETLIFTED_MIMIR_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace mimir {

struct StateBitsetGroundedFlat;
struct StateBitsetGroundedFlatBuilder;

struct StateBitsetGroundedFlat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StateBitsetGroundedFlatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ATOMS = 4
  };
  const ::flatbuffers::Vector<uint64_t> *atoms() const {
    return GetPointer<const ::flatbuffers::Vector<uint64_t> *>(VT_ATOMS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ATOMS) &&
           verifier.VerifyVector(atoms()) &&
           verifier.EndTable();
  }
};

struct StateBitsetGroundedFlatBuilder {
  typedef StateBitsetGroundedFlat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_atoms(::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> atoms) {
    fbb_.AddOffset(StateBitsetGroundedFlat::VT_ATOMS, atoms);
  }
  explicit StateBitsetGroundedFlatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StateBitsetGroundedFlat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StateBitsetGroundedFlat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StateBitsetGroundedFlat> CreateStateBitsetGroundedFlat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint64_t>> atoms = 0) {
  StateBitsetGroundedFlatBuilder builder_(_fbb);
  builder_.add_atoms(atoms);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StateBitsetGroundedFlat> CreateStateBitsetGroundedFlatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint64_t> *atoms = nullptr) {
  auto atoms__ = atoms ? _fbb.CreateVector<uint64_t>(*atoms) : 0;
  return mimir::CreateStateBitsetGroundedFlat(
      _fbb,
      atoms__);
}

inline const mimir::StateBitsetGroundedFlat *GetStateBitsetGroundedFlat(const void *buf) {
  return ::flatbuffers::GetRoot<mimir::StateBitsetGroundedFlat>(buf);
}

inline const mimir::StateBitsetGroundedFlat *GetSizePrefixedStateBitsetGroundedFlat(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<mimir::StateBitsetGroundedFlat>(buf);
}

inline bool VerifyStateBitsetGroundedFlatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mimir::StateBitsetGroundedFlat>(nullptr);
}

inline bool VerifySizePrefixedStateBitsetGroundedFlatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mimir::StateBitsetGroundedFlat>(nullptr);
}

inline void FinishStateBitsetGroundedFlatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::StateBitsetGroundedFlat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStateBitsetGroundedFlatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<mimir::StateBitsetGroundedFlat> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace mimir

#endif  // FLATBUFFERS_GENERATED_BITSETLIFTED_MIMIR_H_
